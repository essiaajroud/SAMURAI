#!/usr/bin/env python3
"""
Script de d√©marrage du serveur Flask pour l'historisation des d√©tections
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """V√©rifier la version de Python"""
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 ou sup√©rieur est requis")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")

def create_virtual_env():
    """Cr√©er un environnement virtuel s'il n'existe pas"""
    venv_path = Path("venv")
    if not venv_path.exists():
        print("üì¶ Cr√©ation de l'environnement virtuel...")
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ Environnement virtuel cr√©√©")
    else:
        print("‚úÖ Environnement virtuel existant")

def install_dependencies():
    """Installer les d√©pendances"""
    print("üì¶ Installation des d√©pendances...")
    
    # D√©terminer le chemin de pip selon l'OS
    if os.name == 'nt':  # Windows
        pip_path = "venv/Scripts/pip"
    else:  # Linux/Mac
        pip_path = "venv/bin/pip"
    
    try:
        subprocess.run([pip_path, "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ D√©pendances install√©es")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation: {e}")
        sys.exit(1)

def start_server():
    """D√©marrer le serveur Flask"""
    print("üöÄ D√©marrage du serveur Flask...")
    print("üìç Serveur accessible sur: http://localhost:5000")
    print("üìä API disponible sur: http://localhost:5000/api")
    print("üîç Health check: http://localhost:5000/api/health")
    print("\n‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter le serveur\n")
    
    # D√©terminer le chemin de python selon l'OS
    if os.name == 'nt':  # Windows
        python_path = "venv/Scripts/python"
    else:  # Linux/Mac
        python_path = "venv/bin/python"
    
    try:
        subprocess.run([python_path, "app.py"])
    except KeyboardInterrupt:
        print("\nüõë Serveur arr√™t√©")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        sys.exit(1)

def main():
    """Fonction principale"""
    print("üéØ Serveur d'Historisation des D√©tections")
    print("=" * 50)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path("app.py").exists():
        print("‚ùå Fichier app.py non trouv√©. Ex√©cutez ce script depuis le dossier server/")
        sys.exit(1)
    
    check_python_version()
    create_virtual_env()
    install_dependencies()
    start_server()

if __name__ == "__main__":
    main() 