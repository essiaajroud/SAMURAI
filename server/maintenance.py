#!/usr/bin/env python3
"""
Script de maintenance automatique pour le serveur de d√©tection.
G√®re le nettoyage automatique des donn√©es et l'optimisation de la base de donn√©es.
"""

import schedule
import time
import requests
import logging
from datetime import datetime, timedelta
import sqlite3
import os

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('maintenance.log'),
        logging.StreamHandler()
    ]
)

# Configuration
SERVER_URL = "http://localhost:5000"
DB_PATH = "instance/detection_history.db"

def cleanup_old_data():
    """Nettoyer les donn√©es anciennes via l'API"""
    try:
        response = requests.post(f"{SERVER_URL}/api/cleanup/auto", timeout=30)
        if response.status_code == 200:
            result = response.json()
            logging.info(f"‚úÖ Nettoyage automatique r√©ussi: {result}")
        else:
            logging.error(f"‚ùå Erreur lors du nettoyage: {response.status_code}")
    except Exception as e:
        logging.error(f"‚ùå Erreur de connexion au serveur: {e}")

def optimize_database():
    """Optimiser la base de donn√©es SQLite"""
    try:
        if os.path.exists(DB_PATH):
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # VACUUM pour r√©organiser la base de donn√©es
            cursor.execute("VACUUM")
            
            # ANALYZE pour mettre √† jour les statistiques
            cursor.execute("ANALYZE")
            
            # V√©rifier l'int√©grit√©
            cursor.execute("PRAGMA integrity_check")
            integrity = cursor.fetchone()
            
            conn.close()
            
            if integrity[0] == 'ok':
                logging.info("‚úÖ Base de donn√©es optimis√©e avec succ√®s")
            else:
                logging.warning(f"‚ö†Ô∏è Probl√®mes d'int√©grit√© d√©tect√©s: {integrity}")
        else:
            logging.warning("‚ö†Ô∏è Base de donn√©es non trouv√©e")
            
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de l'optimisation de la base: {e}")

def check_system_health():
    """V√©rifier la sant√© du syst√®me"""
    try:
        # V√©rifier la connexion au serveur
        response = requests.get(f"{SERVER_URL}/api/health", timeout=10)
        if response.status_code == 200:
            health = response.json()
            logging.info(f"‚úÖ Syst√®me en bonne sant√©: {health}")
        else:
            logging.error(f"‚ùå Probl√®me de sant√© du syst√®me: {response.status_code}")
            
        # V√©rifier les statistiques
        response = requests.get(f"{SERVER_URL}/api/statistics/realtime", timeout=10)
        if response.status_code == 200:
            stats = response.json()
            logging.info(f"üìä Statistiques syst√®me: {stats['global']}")
        else:
            logging.error(f"‚ùå Impossible de r√©cup√©rer les statistiques: {response.status_code}")
            
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la v√©rification de sant√©: {e}")

def backup_database():
    """Sauvegarder la base de donn√©es"""
    try:
        if os.path.exists(DB_PATH):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"backups/detection_history_{timestamp}.db"
            
            # Cr√©er le dossier de sauvegarde s'il n'existe pas
            os.makedirs("backups", exist_ok=True)
            
            # Copier la base de donn√©es
            import shutil
            shutil.copy2(DB_PATH, backup_path)
            
            logging.info(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
            
            # Nettoyer les anciennes sauvegardes (garder seulement les 7 derniers jours)
            cleanup_old_backups()
        else:
            logging.warning("‚ö†Ô∏è Base de donn√©es non trouv√©e pour la sauvegarde")
            
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la sauvegarde: {e}")

def cleanup_old_backups():
    """Nettoyer les anciennes sauvegardes"""
    try:
        if os.path.exists("backups"):
            cutoff_date = datetime.now() - timedelta(days=7)
            
            for filename in os.listdir("backups"):
                if filename.startswith("detection_history_") and filename.endswith(".db"):
                    file_path = os.path.join("backups", filename)
                    file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                    
                    if file_time < cutoff_date:
                        os.remove(file_path)
                        logging.info(f"üóëÔ∏è Ancienne sauvegarde supprim√©e: {filename}")
                        
    except Exception as e:
        logging.error(f"‚ùå Erreur lors du nettoyage des sauvegardes: {e}")

def main():
    """Fonction principale de maintenance"""
    logging.info("üöÄ D√©marrage du syst√®me de maintenance automatique")
    
    # Planifier les t√¢ches de maintenance
    schedule.every(30).minutes.do(cleanup_old_data)  # Nettoyage toutes les 30 minutes
    schedule.every(2).hours.do(optimize_database)    # Optimisation toutes les 2 heures
    schedule.every(15).minutes.do(check_system_health)  # V√©rification de sant√© toutes les 15 minutes
    schedule.every().day.at("02:00").do(backup_database)  # Sauvegarde quotidienne √† 2h du matin
    
    # Ex√©cuter une premi√®re v√©rification
    check_system_health()
    
    # Boucle principale
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # V√©rifier toutes les minutes
        except KeyboardInterrupt:
            logging.info("üõë Arr√™t du syst√®me de maintenance")
            break
        except Exception as e:
            logging.error(f"‚ùå Erreur dans la boucle principale: {e}")
            time.sleep(60)

if __name__ == "__main__":
    main() 